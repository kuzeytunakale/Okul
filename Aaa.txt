import queue
import threading
import json
import sounddevice as sd
from vosk import Model, KaldiRecognizer
import pyautogui

# 1) Parametreler
MODEL_PATH = "model"       # Vosk Türkçe model klasörünüz
SAMPLE_RATE = 16000        # Modelin desteklediği örnekleme hızı
BLOCKSIZE = 8000           # Yaklaşık 0.5 saniyelik blok (8000 frame)

# 2) Ses verisini kuyruğa koyan callback
q = queue.Queue()
def audio_callback(indata, frames, time, status):
    if status:
        print("⚠️ Ses hatası:", status)
    q.put(bytes(indata))

# 3) Modeli yükleyip recognizer’ı oluştur
model = Model(MODEL_PATH)
rec = KaldiRecognizer(model, SAMPLE_RATE)
# Kelime zamanlamasına ihtiyacımız yok; reset sonrası temiz algı için:
rec.SetWords(False)
rec.SetPartialWords(False)

# 4) Tanıma ve tetikleme döngüsü
def recognize_loop():
    while True:
        data = q.get()
        if rec.AcceptWaveform(data):
            # Paket sonundaki kesin sonuç
            result = json.loads(rec.Result())
            text = result.get("text", "")
            if "zıpla" in text:
                pyautogui.press("space")
        else:
            # Henüz paket bitmeden gelen kısmi sonuç
            partial = json.loads(rec.PartialResult()).get("partial", "")
            if "zıpla" in partial:
                pyautogui.press("space")
                # Tekrar tetiklenmemesi için resetleyelim
                rec.Reset()

# 5) Mikrofonu başlat ve dinlemeye al
stream = sd.RawInputStream(
    samplerate=SAMPLE_RATE,
    blocksize=BLOCKSIZE,
    dtype='int16',
    channels=1,
    callback=audio_callback
)

print("🎙 Dinleniyor… “zıpla” dediğinizde anında tetikleme yapılacak.")
with stream:
    t = threading.Thread(target=recognize_loop, daemon=True)
    t.start()
    try:
        threading.Event().wait()  # Ctrl+C ile çıkana kadar çalışır
    except KeyboardInterrupt:
        print("\n⚙️ Çıkılıyor…")
